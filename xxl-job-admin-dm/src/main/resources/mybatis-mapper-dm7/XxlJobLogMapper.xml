<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxl.job.admin.dao.XxlJobLogDao">
	
	<resultMap id="XxlJobLog" type="com.xxl.job.admin.core.model.XxlJobLog" >
		<result column="id" property="id" />
		<result column="job_group" property="jobGroup" />
		<result column="job_id" property="jobId" />
		<result column="executor_address" property="executorAddress" />
		<result column="executor_handler" property="executorHandler" />
	    <result column="executor_param" property="executorParam" />
		<result column="executor_sharding_param" property="executorShardingParam" />
		<result column="executor_fail_retry_count" property="executorFailRetryCount" />
	    <result column="trigger_time" property="triggerTime" />
	    <result column="trigger_code" property="triggerCode" />
	    <result column="trigger_msg" property="triggerMsg" />
	    <result column="handle_time" property="handleTime" />
	    <result column="handle_code" property="handleCode" />
	    <result column="handle_msg" property="handleMsg" />
		<result column="alarm_status" property="alarmStatus" />
	</resultMap>

	<sql id="Base_Column_List">
		id,job_group,job_id,executor_address,
		executor_handler,executor_param,executor_sharding_param,executor_fail_retry_count,
		trigger_time,trigger_code,trigger_msg,handle_time,handle_code,handle_msg,alarm_status
	</sql>
	
	<select id="pageList" resultMap="XxlJobLog">
	  SELECT <include refid="Base_Column_List" />  from (
	  SELECT <include refid="Base_Column_List" /> ,rownum rn FROM (
		SELECT <include refid="Base_Column_List" />
		  FROM xxl_job_log
		  <trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="jobId==0 and jobGroup gt 0">
				AND job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				AND job_id = #{jobId}
			</if>
			<if test="triggerTimeStart != null">
				AND trigger_time <![CDATA[ >= ]]> #{triggerTimeStart}
			</if>
			<if test="triggerTimeEnd != null">
				AND trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd}
			</if>
			<if test="logStatus == 1" >
				AND handle_code = 200
			</if>
			<if test="logStatus == 2" >
				AND (
					trigger_code NOT IN (0, 200) OR
					handle_code NOT IN (0, 200)
				)
			</if>
			<if test="logStatus == 3" >
				AND trigger_code = 200
				AND handle_code = 0
			</if>
		</trim>
		ORDER BY trigger_time DESC ) )
	  WHERE rn <![CDATA[ > ]]> ${offset} and rn <![CDATA[ <= ]]> ${offset}+#{pagesize}
	</select>
	
	<select id="pageListCount" resultType="int">
	  SELECT count(1) FROM xxl_job_log
		<trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="jobId==0 and jobGroup gt 0">
				AND job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				AND job_id = #{jobId}
			</if>
			<if test="triggerTimeStart != null">
				AND trigger_time <![CDATA[ >= ]]> #{triggerTimeStart}
			</if>
			<if test="triggerTimeEnd != null">
				AND trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd}
			</if>
			<if test="logStatus == 1" >
				AND handle_code = 200
			</if>
			<if test="logStatus == 2" >
				AND (
					trigger_code NOT IN (0, 200) OR
					handle_code NOT IN (0, 200)
				)
			</if>
			<if test="logStatus == 3" >
				AND trigger_code = 200
				AND handle_code = 0
			</if>
		</trim>
	</select>
	
	<select id="load" parameterType="java.lang.Long" resultMap="XxlJobLog">
		SELECT <include refid="Base_Column_List" />
		FROM xxl_job_log
		WHERE id = #{id}
	</select>

	
	<insert id="save" parameterType="com.xxl.job.admin.core.model.XxlJobLog" >
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="id">
			select SEQ_JOBLOG.nextval from dual
		</selectKey>
		INSERT INTO xxl_job_log (
		    id,job_group,job_id,trigger_time,trigger_code,handle_code
		) VALUES (
		    #{id},#{jobGroup},#{jobId},#{triggerTime},#{triggerCode},#{handleCode}
		)
	</insert>

	<update id="updateTriggerInfo" >
		UPDATE xxl_job_log
		SET
			trigger_time= #{triggerTime, jdbcType=TIMESTAMP},
			trigger_code= #{triggerCode, jdbcType=VARCHAR},
			trigger_msg= #{triggerMsg, jdbcType=VARCHAR},
			executor_address= #{executorAddress, jdbcType=VARCHAR},
			executor_handler=#{executorHandler, jdbcType=VARCHAR},
			executor_param= #{executorParam, jdbcType=VARCHAR},
			executor_sharding_param= #{executorShardingParam, jdbcType=VARCHAR},
			executor_fail_retry_count= #{executorFailRetryCount, jdbcType=NUMERIC}
		WHERE id= #{id}
	</update>

	<update id="updateHandleInfo">
		UPDATE xxl_job_log
		SET 
			handle_time= #{handleTime, jdbcType=TIMESTAMP},
			handle_code= #{handleCode, jdbcType=VARCHAR},
			handle_msg= #{handleMsg, jdbcType=VARCHAR}
		WHERE id= #{id}
	</update>
	
	<delete id="delete" >
		delete from xxl_job_log
		WHERE job_id = #{jobId}
	</delete>


<!--    <select id="triggerCountByDay" resultType="java.util.Map" >-->
<!--		SELECT triggerDay,-->
<!--		    COUNT(handle_code) triggerDayCount,-->
<!--		    SUM(CASE WHEN (trigger_code in (0, 200) and handle_code = 0) then 1 else 0 end) triggerDayCountRunning,-->
<!--		    SUM(CASE WHEN handle_code = 200 then 1 else 0 end) triggerDayCountSuc from (-->
<!--		        select handle_code,trigger_code,to_CHAR(trigger_time,'yyyy-MM-dd') triggerDay FROM xxl_job_log-->
<!--		        where trigger_time between #{from} and #{to} )-->
<!--		GROUP BY triggerDay  ORDER BY triggerDay-->

<!--	</select>-->

	<select id="findLogReport" resultType="java.util.Map" >
		SELECT
			COUNT(handle_code) triggerDayCount,
			SUM(CASE WHEN (trigger_code in (0, 200) and handle_code = 0) then 1 else 0 end) as triggerDayCountRunning,
			SUM(CASE WHEN handle_code = 200 then 1 else 0 end) as triggerDayCountSuc
		FROM xxl_job_log
		WHERE trigger_time BETWEEN #{from} and #{to}
    </select>

	<select id="findClearLogIds" resultType="long" >
		SELECT id FROM xxl_job_log
		<trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="jobGroup gt 0">
				AND job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				AND job_id = #{jobId}
			</if>
			<if test="clearBeforeTime != null">
				AND trigger_time <![CDATA[ <= ]]> #{clearBeforeTime}
			</if>
			<if test="clearBeforeNum gt 0">
				AND id NOT in(
				SELECT id FROM(
				SELECT id FROM xxl_job_log AS t
				<trim prefix="WHERE" prefixOverrides="AND | OR" >
					<if test="jobGroup gt 0">
						AND t.job_group = #{jobGroup}
					</if>
					<if test="jobId gt 0">
						AND t.job_id = #{jobId}
					</if>
				</trim>
				ORDER BY t.trigger_time desc
				LIMIT 0, #{clearBeforeNum}
				) t1
				)
			</if>
		</trim>
		order by id asc
		LIMIT #{pagesize}
	</select>

	<delete id="clearLog" >
		delete from xxl_job_log
		WHERE id in
		<foreach collection="logIds" item="item" open="(" close=")" separator="," >
			#{item}
		</foreach>
	</delete>

	<select id="findFailJobLogIds" resultType="long" >
		SELECT id FROM xxl_job_log
		WHERE (
			(trigger_code = 500 and handle_code = 0)
			OR
			(handle_code <![CDATA[ >= ]]> 500)
		)
		AND alarm_status = 0
		ORDER BY id ASC
	</select>

	<update id="updateAlarmStatus" >
		UPDATE xxl_job_log
		SET
			alarm_status = #{newAlarmStatus}
		WHERE id= #{logId} AND alarm_status = #{oldAlarmStatus}
	</update>
	
</mapper>